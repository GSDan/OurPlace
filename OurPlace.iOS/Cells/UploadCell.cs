#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.IO;
using FFImageLoading;
using FFImageLoading.Transformations;
using FFImageLoading.Work;
using Foundation;
using Newtonsoft.Json;
using OurPlace.Common.LocalData;
using UIKit;

namespace OurPlace.iOS
{
    public partial class UploadCell : UITableViewCell
    {
        public static readonly NSString Key = new NSString("UploadCell");

        public UploadCell(IntPtr handle) : base(handle)
        {
        }

        public void UpdateContent(AppDataUpload data)
        {
            string url = (!string.IsNullOrWhiteSpace(data.ImageUrl)) ? AppUtils.GetPathForLocalFile(data.ImageUrl) : "";

            if (!File.Exists(url))
            {
                url = (string.IsNullOrWhiteSpace(data.ImageUrl)) ?
                "" :
                Common.ServerUtils.GetUploadUrl(data.ImageUrl);
            }

            if (string.IsNullOrWhiteSpace(url))
            {
                ImageService.Instance.LoadCompiledResource("AppLogo").Into(ActivityIcon);
            }
            else
            {
                // check if it's a local file
                if (File.Exists(url))
                {
                    ImageService.Instance.LoadFile(url).
                                Transform(new CircleTransformation()).Into(ActivityIcon);
                }
                else
                {
                    //string imgUrl = Common.ServerUtils.GetUploadUrl(url);
                    ImageService.Instance.LoadUrl(url).
                                Transform(new CircleTransformation()).Into(ActivityIcon);
                }
            }

            List<FileUpload> files = JsonConvert.DeserializeObject<List<FileUpload>>(data.FilesJson);

            float totalFileSizeMb = 0;

            string folderPath = (data.UploadType == UploadType.NewActivity) ?
                Storage.GetCacheFolder() : Storage.GetUploadsFolder();

            foreach (FileUpload up in files)
            {
                if (!string.IsNullOrWhiteSpace(up.RemoteFilePath))
                {
                    continue;
                }

                string absPath = Path.Combine(folderPath, up.LocalFilePath);

                FileInfo fInfo = new FileInfo(absPath);
                if (fInfo.Exists)
                {
                    totalFileSizeMb += fInfo.Length / 1000000f;
                }
            }

            TitleLabel.Text = data.Name;
            DateLabel.Text = string.Format("Created: {0:g}", data.CreatedAt.ToLocalTime());
            FileSizeLabel.Text = string.Format("Total size: {0:0.0}MB", totalFileSizeMb);
        }
    }
}
