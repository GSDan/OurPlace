#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using FFImageLoading;
using Foundation;
using Newtonsoft.Json;
using OurPlace.iOS.Delegates;
using OurPlace.iOS.ViewSources;
using OurPlace.Common.Models;
using UIKit;

namespace OurPlace.iOS
{
	public partial class ResultTaskCell : UITableViewCell
	{
		public static NSString Key = new NSString("ResultTaskCell");
		private AppTask taskData;
        private Action<AppTask> startTask;
        private NSLayoutConstraint showChildTeaseConstraint;
        private NSLayoutConstraint hideChildTeaseConstraint;
        private NSLayoutConstraint showCollectionConstraint;
        private NSLayoutConstraint hideCollectionConstraint;
        private List<string> files;
        private Action<AppTask, string, int> onResultClicked;
        
		public ResultTaskCell (IntPtr handle) : base (handle)
		{
		}

        private void ResultClicked(int resIndex)
        {
            onResultClicked(taskData, files[resIndex], resIndex);
        }
        
        public void UpdateContent(AppTask data, Action<AppTask> OnButtonClicked, Action<AppTask, string, int> OnResultClicked)
        {
			taskData = data;
            startTask = OnButtonClicked;

            TaskType.Text = data.TaskType.DisplayName;
			TaskDescription.Text = data.Description;

            if (string.IsNullOrWhiteSpace(data.TaskType.IconUrl))
            {
                ImageService.Instance.LoadCompiledResource("AppLogo").Into(TaskTypeIcon);
            }
            else
            {
                ImageService.Instance.LoadUrl(data.TaskType.IconUrl)
                            //.LoadingPlaceholder("AppLogo", ImageSource.CompiledResource)
                            .Into(TaskTypeIcon);
            }


            // Show tease label if this task has children and hasn't yet been completed
            if (data.ChildTasks != null && data.ChildTasks.Count() > 0 && !data.IsCompleted)
            {
                NSLayoutConstraint.DeactivateConstraints(new NSLayoutConstraint[] { hideChildTeaseConstraint });
                NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] { showChildTeaseConstraint });
                ChildTease.Text = string.Format(
               "Complete this to view {0} locked task{1}!",
               data.ChildTasks.Count(),
               data.ChildTasks.Count() > 1 ? "s" : "");
            }
            else
            {
                NSLayoutConstraint.DeactivateConstraints(new NSLayoutConstraint[] { showChildTeaseConstraint });
                NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] { hideChildTeaseConstraint });
            }

            // Make child tasks visually distinct
            Layer.BackgroundColor = (data.IsChild) ? UIColor.FromRGBA(140, 192, 77, 50).CGColor : UIColor.White.CGColor;


			onResultClicked = OnResultClicked;
            
            // default to not showing result collection
            NSLayoutConstraint.DeactivateConstraints(new NSLayoutConstraint[] { showCollectionConstraint });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] { hideCollectionConstraint });
            StartButton.SetTitle("Start", UIControlState.Normal);
            files = new List<string>();

            if (data.CompletionData != null && !string.IsNullOrWhiteSpace(data.CompletionData.JsonData))
            {
                files = JsonConvert.DeserializeObject<List<string>>(data.CompletionData.JsonData ?? "") ?? new List<string>();

                if (files.Count > 0)
                {
                    NSLayoutConstraint.DeactivateConstraints(new NSLayoutConstraint[] { hideCollectionConstraint });
                    NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] { showCollectionConstraint });
                    switch (data.TaskType.IdName)
                    {
                        case "MATCH_PHOTO":
                        case "TAKE_PHOTO":
                            StartButton.SetTitle("Take another", UIControlState.Normal);
                            break;
                        case "TAKE_VIDEO":
                        case "REC_AUDIO":
                            StartButton.SetTitle("Record another", UIControlState.Normal);
                            break;
                    }
                }

                ResultCollectionView.AllowsSelection = true;
                
            }

            ResultCollectionView.Source = new TaskResultViewSource(files);
            ResultCollectionView.Delegate = new ClickableDelegate(ResultClicked);
            ResultCollectionView.UpdateConstraints();
            ResultCollectionView.ReloadData();
            ResultCollectionView.CollectionViewLayout.InvalidateLayout();
        }
        
        public override void AwakeFromNib()
        {
            base.AwakeFromNib();
            
			float screenWidth = (float)UIScreen.MainScreen.Bounds.Width;
            float cellWidth = (screenWidth - 10) / 1.4f;
                     
            showChildTeaseConstraint = NSLayoutConstraint.Create(ChildTease, NSLayoutAttribute.Height, NSLayoutRelation.Equal, 1, 15);
            showChildTeaseConstraint.Active = false;
            hideChildTeaseConstraint = NSLayoutConstraint.Create(ChildTease, NSLayoutAttribute.Height, NSLayoutRelation.Equal, 1, 0);
            hideChildTeaseConstraint.Active = true;

            StartButton.TouchUpInside += (sender, e) => {
                if (taskData != null && startTask != null)
                {
                    startTask(taskData);
                }
            };

            showCollectionConstraint = NSLayoutConstraint.Create(ResultCollectionView, NSLayoutAttribute.Height, NSLayoutRelation.Equal, 1, 100);
            showCollectionConstraint.Active = false;
            hideCollectionConstraint = NSLayoutConstraint.Create(ResultCollectionView, NSLayoutAttribute.Height, NSLayoutRelation.Equal, 1, 0);
            hideCollectionConstraint.Active = true;
            
			NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {  hideChildTeaseConstraint, hideCollectionConstraint });
            
        }
	}
}
