#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using OurPlace.Common.Models;
using OurPlace.iOS.Helpers;
using UIKit;
using OurPlace.Common.LocalData;
using static OurPlace.Common.LocalData.Storage;
using Newtonsoft.Json;
using OurPlace.iOS.ViewSources;
using System.Threading.Tasks;
using System.Net;
using OurPlace.Common;
using System.IO;
using FFImageLoading;
using CoreGraphics;
using System.Linq;
using ZXing.Mobile;
using GlobalToast;

namespace OurPlace.iOS
{
    public partial class ActivityController : UITableViewController
    {
        public LearningActivity DisplayedActivity { get; set; }
        private LoadingOverlay loadPop;
        private Dictionary<int, List<AppTask>> hiddenChildren;
        private bool loaded;
        private MobileBarcodeScanner scanner;
        private AppTask currentScanTask;

        public ActivityController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            TableView.RegisterNibForCellReuse(TaskCell_Info.Nib, TaskCell_Info.Key);
            TableView.RegisterNibForCellReuse(TaskCell_Simple.Nib, TaskCell_Simple.Key);
            TableView.RegisterNibForCellReuse(TaskCell_NameEntry.Nib, TaskCell_NameEntry.Key);

            TableView.RowHeight = UITableView.AutomaticDimension;
            TableView.EstimatedRowHeight = 180;
            TableView.ReloadData();

            FinishButton.TouchUpInside += FinishButtonPressed;
        }

        public override async void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            // Load this activity's progress from the database if available
            ActivityProgress progress = (await GetDatabaseManager()).GetProgress(DisplayedActivity);
            List<AppTask> appTasks = null;

            if (progress != null)
            {
                appTasks = JsonConvert.DeserializeObject<List<AppTask>>(progress.AppTaskJson,
                    new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto });
            }

            if (appTasks == null)
            {
                appTasks = new List<AppTask>();

                foreach (LearningTask t in DisplayedActivity.LearningTasks)
                {
                    appTasks.Add(new AppTask(t));
                }
            }

            TaskViewSource source = new TaskViewSource(DisplayedActivity, appTasks, StartTask, ResultClicked, NameEdit);
            source.enteredName = progress?.EnteredUsername;

            TableView.Source = source;

            hiddenChildren = new Dictionary<int, List<AppTask>>();
            AppTask[] temp = appTasks.ToArray();

            foreach (AppTask parent in temp)
            {
                if (parent.TaskType.IdName == "INFO") parent.IsCompleted = true;

                if (parent.ChildAppTasks?.Count > 0)
                {
                    hiddenChildren.Add(parent.Id, parent.ChildAppTasks);
                    CheckForChildren(appTasks.IndexOf(parent));
                }
            }

            TableView.ReloadData();

            if (!loaded)
            {
                var suppress = PrepActivityFiles();
            }
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();

            UIView header = TableView.TableHeaderView;

            if (header != null && HeaderDescription.Text != "placeholder description")
            {
                CGSize newSize = header.SystemLayoutSizeFittingSize(UIView.UILayoutFittingCompressedSize);
                if (header.Frame.Size.Height != newSize.Height)
                {
                    header.Frame = new CGRect(header.Frame.X, header.Frame.Y, header.Frame.Width, newSize.Height);
                    TableView.ReloadData();
                }
            }
        }

        private void NameEdit()
        {
            UIAlertController alertController = UIAlertController.Create(
                "Enter Name(s)",
                "Please enter your name(s) or the name of your group:",
                UIAlertControllerStyle.Alert);

            UITextField field = null;

            // Add and configure text field
            alertController.AddTextField((textField) =>
            {
                // Save the field
                field = textField;
                field.ReturnKeyType = UIReturnKeyType.Done;
                field.ClearButtonMode = UITextFieldViewMode.WhileEditing;
                field.Text = (TableView.Source as TaskViewSource).enteredName;
            });

            alertController.AddAction(UIAlertAction.Create("Done", UIAlertActionStyle.Default, (actionOK) =>
            {
                if (!string.IsNullOrWhiteSpace(field.Text))
                {
                    (TableView.Source as TaskViewSource).enteredName = field.Text;
                    TableView.ReloadRows(new NSIndexPath[] { NSIndexPath.FromRowSection(0, 0) }, UITableViewRowAnimation.Automatic);
                    var suppress = SaveProgress();
                }
            }));

            // Add cancel button
            alertController.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, null));

            PresentViewController(alertController, true, null);
        }

        private void FinishButtonPressed(object sender, EventArgs e)
        {
            if (DisplayedActivity.RequireUsername &&
                string.IsNullOrWhiteSpace((TableView.Source as TaskViewSource).enteredName))
            {
                AppUtils.ShowSimpleDialog(this, "Please Enter Your Name", "The activity's creator has chosen to require you to enter your name before finishing. Please enter your name before continuing.", "Got it");
                return;
            }
            var suppress = PackageForUpload();
        }

        private void CheckForChildren(int position)
        {
            AppTask parent = ((TaskViewSource)TableView.Source).Rows[position];
            bool hasChildren = parent.ChildTasks != null && parent.ChildTasks.ToList().Count > 0;

            if (hasChildren && !parent.IsCompleted)
            {
                if (!hiddenChildren.ContainsKey(parent.Id))
                {
                    // Parent task is no longer complete, hide children
                    hiddenChildren[parent.Id] = new List<AppTask>();
                    foreach (LearningTask child in parent.ChildTasks)
                    {
                        AppTask childProgress = ((TaskViewSource)TableView.Source).GetWithId(child.Id);
                        if (childProgress != null)
                        {
                            hiddenChildren[parent.Id].Add(childProgress);
                            ((TaskViewSource)TableView.Source).Rows.Remove(childProgress);
                        }
                    }
                    TableView.ReloadData();

                }
            }
            else if (hasChildren && parent.IsCompleted)
            {
                // Show the child tasks if they're hidden
                if (hiddenChildren.ContainsKey(parent.Id))
                {
                    var children = hiddenChildren[parent.Id];
                    int nextPos = position + 1;
                    foreach (AppTask child in children)
                    {
                        if (!((TaskViewSource)TableView.Source).Rows.Exists(t => t?.Id == child.Id))
                        {
                            ((TaskViewSource)TableView.Source).Rows.Insert(nextPos++, child);
                        }
                    }
                    hiddenChildren.Remove(parent.Id);
                    TableView.ReloadData();
                }
            }
        }

        private async Task PrepActivityFiles()
        {
            var bounds = UIScreen.MainScreen.Bounds;
            loadPop = new LoadingOverlay(bounds);
            View.Add(loadPop);

            HeaderTitle.Text = DisplayedActivity.Name;
            HeaderDescription.Text = DisplayedActivity.Description;

            // Get all tasks in this activity which use uploaded files
            List<TaskFileInfo> fileUrls = GetFileTasks(DisplayedActivity);

            using (WebClient webClient = new WebClient())
            {
                // Loop over and pre-prepare listed files
                for (int i = 0; i < fileUrls.Count; i++)
                {
                    loadPop.UpdateText(string.Format("Downloading file {0} of {1}", i + 1, fileUrls.Count));

                    Console.WriteLine("Checking file " + i);

                    // Update loading dialog with current progress
                    string thisUrl = ServerUtils.GetUploadUrl(fileUrls[i].fileUrl);
                    string cachePath = GetCacheFilePath(thisUrl, DisplayedActivity.Id, fileUrls[i].extension);

                    if (File.Exists(cachePath))
                    {
                        Console.WriteLine("File " + i + " already exists");
                        continue;
                    }

                    Console.WriteLine("Downloading file " + i);

                    await webClient.DownloadFileTaskAsync(new Uri(thisUrl), cachePath);

                    Console.WriteLine("Downloaded file " + i);
                }
            }

            if (string.IsNullOrWhiteSpace(DisplayedActivity.ImageUrl))
            {
                ImageService.Instance.LoadCompiledResource("AppLogo").Into(HeaderImage);
            }
            else
            {
                Console.WriteLine("Loading header image");
                string imgUrl = Common.ServerUtils.GetUploadUrl(DisplayedActivity.ImageUrl);
                ImageService.Instance.LoadUrl(imgUrl).Into(HeaderImage);
            }

            Console.WriteLine("All files complete");

            loadPop.Hide();

            loaded = true;
        }

        private async void StartTask(AppTask taskData)
        {
            switch (taskData.TaskType.IdName)
            {
                case "DRAW":
                case "DRAW_PHOTO":
                    DrawingViewController drawingController = Storyboard.InstantiateViewController("DrawingController") as DrawingViewController;
                    drawingController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);

                    // check to see if should draw on previous task's result
                    if (taskData.JsonData.StartsWith("TASK::", StringComparison.OrdinalIgnoreCase))
                    {
                        int id = -1;
                        int.TryParse(taskData.JsonData.Substring(6), out id);
                        string[] paths = JsonConvert.DeserializeObject<string[]>(
                            ((TaskViewSource)TableView.Source).GetWithId(id)?.CompletionData.JsonData);

                        if (paths != null && paths.Length > 0)
                        {
                            drawingController.previousImage = paths[0];
                        }
                    }

                    break;
                case "LISTEN_AUDIO":
                    ResultMediaViewerController listenAudioController = Storyboard.InstantiateViewController("MediaViewerController") as ResultMediaViewerController;
                    listenAudioController.FilePath = GetCacheFilePath(taskData.JsonData, DisplayedActivity.Id, ServerUtils.GetFileExtension(taskData.TaskType.IdName)); ;
                    listenAudioController.Task = taskData;
                    listenAudioController.DeleteResult = null;
                    NavigationController.PushViewController(listenAudioController, true);

                    // Mark as complete
                    TaskResultReturned(null, taskData.Id);

                    break;
                case "MAP_MARK":
                    MapMarkingViewController mapMarkController = Storyboard.InstantiateViewController("MapMarkController") as MapMarkingViewController;
                    mapMarkController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);
                    break;
                case "LOC_HUNT":
                    LocationHuntViewController locHuntController = Storyboard.InstantiateViewController("LocationHuntController") as LocationHuntViewController;
                    locHuntController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);
                    break;
                case "ENTER_TEXT":
                    EnterTextViewController textController = Storyboard.InstantiateViewController("EnterTextController") as EnterTextViewController;
                    textController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);
                    break;
                case "MULT_CHOICE":
                    MultipleChoiceController mcController = Storyboard.InstantiateViewController("MultipleChoiceController") as MultipleChoiceController;
                    mcController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);
                    break;
                case "TAKE_VIDEO":
                    bool hasMicPerms = await AppUtils.AuthorizeMic();
                    if (!hasMicPerms)
                    {
                        AppUtils.ShowSimpleDialog(this, "Requires Microphone", "Please grant OurPlace microphone access in the system settings to complete this task!", "Ok");
                        return;
                    }
                    goto case "TAKE_PHOTO"; // eew C# why u do dis
                case "MATCH_PHOTO":
                case "TAKE_PHOTO":
                    bool hasCamPerms = await AppUtils.AuthorizeCamera();
                    if (!hasCamPerms)
                    {
                        AppUtils.ShowSimpleDialog(this, "Requires Camera", "Please grant OurPlace camera access in the system settings to complete this task!", "Ok");
                        return;
                    }
                    CameraViewController camController = Storyboard.InstantiateViewController("PhotoTaskViewController") as CameraViewController;
                    camController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);
                    break;
                case "REC_AUDIO":
                    hasMicPerms = await AppUtils.AuthorizeMic();
                    if (!hasMicPerms)
                    {
                        AppUtils.ShowSimpleDialog(this, "Requires Microphone", "Please grant OurPlace microphone access in the system settings to complete this task!", "Ok");
                        return;
                    }
                    RecordAudioController audioController = Storyboard.InstantiateViewController("RecordAudioController") as RecordAudioController;
                    audioController.StartTask(DisplayedActivity, taskData, TaskResultReturned, NavigationController);
                    break;
                case "SCAN_QR":
                    StartScanning(taskData);
                    break;
                default:
                    Console.WriteLine("Unknown task type: " + taskData.TaskType.IdName);
                    break;
            }
        }

        private void StartScanning(AppTask thisTask)
        {
            currentScanTask = thisTask;
            scanner = new MobileBarcodeScanner(NavigationController)
            {
                UseCustomOverlay = false,
                TopText = thisTask.TaskType.Description,
                BottomText = thisTask.Description
            };
            scanner.ScanContinuously(HandleScanResult);
        }

        private void HandleScanResult(ZXing.Result result)
        {
            if (result != null && !string.IsNullOrEmpty(result.Text))
            {
                if (result.Text == ServerUtils.GetTaskQRCodeData(currentScanTask.Id))
                {
                    scanner.Cancel();
                    InvokeOnMainThread(() =>
                    {
                        Toast.ShowToast("Found!");
                        TaskResultReturned(null, currentScanTask.Id);
                    });
                }
                else
                {
                    InvokeOnMainThread(() => { Toast.ShowToast("That's not the right code!"); });
                }
            }
            else
            {
                InvokeOnMainThread(() => { Toast.ShowToast("Scan cancelled"); });
            }

        }

        private void TaskResultReturned(string result, int taskId)
        {
            List<AppTask> rows = ((TaskViewSource)TableView.Source).Rows;
            int index = rows.FindIndex(t => t.Id == taskId);
            if (index == -1) return;

            if (!string.IsNullOrWhiteSpace(result))
            {
                switch (rows[index].TaskType.IdName)
                {
                    case "ENTER_TEXT":
                    case "MULT_CHOICE":
                    case "MAP_MARK":
                        rows[index].CompletionData.JsonData = result;
                        break;
                    default:
                        // Array of strings (e.g. filepaths)
                        List<string> resList = JsonConvert.DeserializeObject<List<string>>(rows[index].CompletionData.JsonData ?? "") ?? new List<string>();
                        resList.Add(result);
                        rows[index].CompletionData.JsonData = JsonConvert.SerializeObject(resList);
                        break;
                }
            }

            rows[index].IsCompleted = true;

            ((TaskViewSource)TableView.Source).Rows = rows;

            var suppress = SaveProgress();

            TableView.ReloadData();

            CheckForChildren(index);
        }

        private async Task SaveProgress()
        {
            TaskViewSource source = ((TaskViewSource)TableView.Source);
            (await GetDatabaseManager()).SaveActivityProgress(DisplayedActivity, source.Rows, source.enteredName);
        }

        private void ResultClicked(AppTask task, string resFile, int resIndex)
        {
            string fullPath = Path.Combine(GetCacheFolder(), resFile);

            ResultMediaViewerController imageViewer = Storyboard.InstantiateViewController("MediaViewerController") as ResultMediaViewerController;
            imageViewer.FilePath = fullPath;
            imageViewer.Task = task;
            imageViewer.ResultIndex = resIndex;
            imageViewer.DeleteResult = DeleteFile;
            NavigationController.PushViewController(imageViewer, true);
        }

        // Delete file and update task with new result data
        private async void DeleteFile(AppTask task, string filePath, int resultIndex)
        {
            List<AppTask> rows = ((TaskViewSource)TableView.Source).Rows;
            int taskIndex = rows.FindIndex(t => t.Id == task.Id);
            if (taskIndex == -1) return;

            Console.WriteLine("Going to delete file: " + filePath);
            File.Delete(filePath);
            List<string> taskResults = JsonConvert.DeserializeObject<List<string>>(task.CompletionData.JsonData);
            taskResults.RemoveAt(resultIndex);
            task.CompletionData.JsonData = JsonConvert.SerializeObject(taskResults);
            task.IsCompleted = taskResults.Count > 0;

            rows[taskIndex] = task;

            ((TaskViewSource)TableView.Source).Rows = rows;

            //TODO enter username for activity
            (await GetDatabaseManager()).SaveActivityProgress(DisplayedActivity, rows, "TODO");

            TableView.ReloadData();

            CheckForChildren(taskIndex);
        }

        public async Task PackageForUpload()
        {
            List<AppTask> preppedTasks = new List<AppTask>();
            foreach (AppTask t in ((TaskViewSource)TableView.Source).Rows)
            {
                if (t == null) continue;

                preppedTasks.Add(PrepForUpload(t, true));
            }

            await ImageService.Instance.InvalidateCacheAsync(FFImageLoading.Cache.CacheType.All);

            // Skip packaging the upload if there is no entered data
            bool anyData = false;
            foreach (AppTask t in preppedTasks)
            {
                if (!string.IsNullOrWhiteSpace(t.CompletionData.JsonData))
                {
                    anyData = true;
                }
            }
            if (!anyData)
            {
                NavigationController.PopViewController(true);
                return;
            }

            ApplicationUser creator = DisplayedActivity.Author;
            if (creator != null && creator.Id != (await GetDatabaseManager()).currentUser.Id)
            {
                string name = creator.FirstName[0] + ". " + creator.Surname;

                AppUtils.ShowChoiceDialog(this,
                                             string.Format("Share with {0}?", name),
                                             string.Format("Do you want to share your results with this activity's creator, {0}?", name),
                                             "Yes, share",
                                                (preppedRes) => { AddToUploads(preppedTasks, true); },
                                             "No",
                                                (preppedRes) => { AddToUploads(preppedTasks, false); },
                                             preppedTasks);
            }
            else
            {
                AddToUploads(preppedTasks, false);
            }
        }

        private async void AddToUploads(List<AppTask> preppedTasks, bool shareWithCreator)
        {
            Random rand = new Random();
            AppDataUpload uploadData = new AppDataUpload
            {
                ItemId = rand.Next(),
                UploadRoute = string.Format("api/CompletedTasks/Submit?activityId={0}&shareWithCreator={1}&enteredName={2}",
                                            DisplayedActivity.Id, shareWithCreator, (TableView.Source as TaskViewSource).enteredName),
                Name = DisplayedActivity.Name,
                Description = DisplayedActivity.Description,
                ImageUrl = DisplayedActivity.ImageUrl,
                UploadType = UploadType.Result,
                CreatedAt = DateTime.Now,
                FilesJson = JsonConvert.SerializeObject(MakeUploads(preppedTasks)),
                JsonData = JsonConvert.SerializeObject(preppedTasks,
                    new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                        MaxDepth = 5,
                        TypeNameHandling = TypeNameHandling.Auto
                    })
            };

            DatabaseManager dbManager = await GetDatabaseManager();

            dbManager.AddUpload(uploadData);
            dbManager.DeleteProgress(DisplayedActivity.Id);

            NavigationController.PopViewController(true);
            return;
        }
    }
}
