#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using CoreAnimation;
using CoreLocation;
using Foundation;
using Google.Maps;
using Newtonsoft.Json;
using OurPlace.iOS.Controllers.Tasks;
using OurPlace.Common.Models;
using UIKit;

namespace OurPlace.iOS
{
    public partial class MapMarkingViewController : TaskViewController
	{
        private MapMarkerTaskData taskData;
        private bool firstLocationUpdate;
        private List<Marker> markers;
        private CLLocationCoordinate2D lastLocation;

		public MapMarkingViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            if (thisTask == null)
            {
                AppUtils.ShowSimpleDialog(this, "ERROR", "Error loading task data", "Ok");
                NavigationController.PopViewController(true);
                return;
            }

            taskData = JsonConvert.DeserializeObject<MapMarkerTaskData>(thisTask.JsonData);

            markers = new List<Marker>();
            mapView.MapType = MapViewType.Hybrid;
            mapView.Settings.MyLocationButton = true;

            if(!string.IsNullOrWhiteSpace(thisTask.CompletionData.JsonData))
            {
                // load previously placed markers
                Map_Location[] locs = JsonConvert.DeserializeObject<Map_Location[]>(thisTask.CompletionData.JsonData);

                if(locs != null)
                {
                    foreach (Map_Location loc in locs)
                    {
                        CLLocationCoordinate2D coord = new CLLocationCoordinate2D(loc.Lat, loc.Long);
                        var color = UIColor.FromHSBA((float)AppUtils.GetRandomNumber(), 1, 1, 1.0f);
                        var marker = Marker.FromPosition(coord);
                        marker.AppearAnimation = MarkerAnimation.Pop;
                        marker.Icon = Marker.MarkerImage(color);
                        marker.Map = mapView;
                        markers.Add(marker);
                    }
                }
            }

            UpdateText();
            TaskDescLabel.Text = thisTask.Description;

            // Listen to the myLocation property of GMSMapView.
            mapView.AddObserver(this, new NSString("myLocation"), NSKeyValueObservingOptions.New, IntPtr.Zero);

            mapView.CoordinateTapped += CoordinateTapped;
            mapView.TappedMarker += TappedMarker;

            // Ask for My Location data after the map has already been added to the UI.
            InvokeOnMainThread(() => mapView.MyLocationEnabled = true);

            MarkLocButton.TouchUpInside += AddMarkerOnPosition;
            ProgressFinishButton.TouchUpInside += FinishButtonPressed;
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
            mapView.RemoveObserver(this, new NSString("myLocation"));
        }

        public override void ObserveValue(NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr context)
        {
            lastLocation = (change.ObjectForKey(NSValue.ChangeNewKey) as CLLocation).Coordinate;
            if (!firstLocationUpdate)
            {
                // Move camera to first location update
                firstLocationUpdate = true;
                mapView.Camera = CameraPosition.FromCamera(lastLocation, 16);
            }

            // check to see if this location has been tagged already
            MarkLocButton.Enabled = CheckThisLocationMarked();
        }

        private bool CheckThisLocationMarked()
        {
            return !markers.Exists((m) =>
                                         Common.Helpers.AlmostEquals(m.Position.Latitude, lastLocation.Latitude, 0.000001) &&
                                         Common.Helpers.AlmostEquals(m.Position.Longitude, lastLocation.Longitude, 0.000001));
        }

        private void CoordinateTapped(object sender, GMSCoordEventArgs e)
        {
            if(taskData.UserLocationOnly)
            {
                AppUtils.ShowSimpleDialog(this, 
                                          "Can't place custom markers during this task", 
                                          "For this task, please use the 'Mark Current Location' button to place markers.",
                                          "Got it");
                return;
            }

            if (CanPlaceNewMarker())
            {
                PlaceMarkerAtCoord(e.Coordinate);
            }
        }

        private bool CanPlaceNewMarker()
        {
            if (taskData.MaxNumMarkers != 0 && markers.Count >= taskData.MaxNumMarkers)
            {
                string message = string.Format(
                    "This task allows at most {0} marker{1} to be placed. " +
                    "Tap an existing marker to delete it before placing another!",
                    taskData.MaxNumMarkers, (taskData.MaxNumMarkers > 1) ? "s" : "");

                AppUtils.ShowSimpleDialog(this,
                                          "Max number of markers!",
                                          message,
                                          "Got it!");
                return false;
            }

            return true;
        }

        private void PlaceMarkerAtCoord(CLLocationCoordinate2D coord)
        {
            var color = UIColor.FromHSBA((float)AppUtils.GetRandomNumber(), 1, 1, 1.0f);
            var marker = Marker.FromPosition(coord);
            marker.AppearAnimation = MarkerAnimation.Pop;
            marker.Icon = Marker.MarkerImage(color);
            marker.Map = mapView;
            markers.Add(marker);

            UpdateText();
        }

        private bool TappedMarker(MapView mapView, Marker marker)
        {
            CATransaction.Begin();
            CATransaction.AnimationDuration = 0.5;  // 1 second animation
            var cam = new CameraPosition(marker.Position, 16, 0, 0);
            mapView.Animate(cam);
            CATransaction.Commit();

            AppUtils.ShowChoiceDialog(this, "Remove Marker?",
                                      "Do you want to delete this marker?",
                                      "Yes", (mrk) => { 
                                            mrk.Map = null; 
                                            markers.Remove(mrk); 
                                            MarkLocButton.Enabled = CheckThisLocationMarked(); 
                                            UpdateText();
                                        },
                                      "No", (mrk) => { }, marker);
            return true;
        }

        private void UpdateText()
        {
            int numMore = taskData.MinNumMarkers - markers.Count;
            if(numMore > 0)
            {
                ProgressFinishButton.SetTitle(string.Format("{0} more marker{1} needed!",
                                                            numMore,
                                                            (numMore > 1) ? "s" : ""),
                                              UIControlState.Disabled);
                ProgressFinishButton.Enabled = false;
            }
            else
            {
                ProgressFinishButton.SetTitle("Save and Finish", UIControlState.Normal);
                ProgressFinishButton.Enabled = true;
            }

            if(taskData.MaxNumMarkers == 0)
            {
                AvailableLabel.Text = "Place as many markers as you like!";
            }
            else
            {
                int numAvail = taskData.MaxNumMarkers - markers.Count;

                AvailableLabel.TextColor = (numAvail > 0) ? UIColor.Black : UIColor.Red;
                AvailableLabel.Text = string.Format("You can place {0} more marker{1}",
                                                    numAvail, (numAvail != 1) ? "s" : "");
            }
        }

        private void AddMarkerOnPosition(object sender, EventArgs e)
        {
            if (CanPlaceNewMarker())
            {
                PlaceMarkerAtCoord(lastLocation);
                MarkLocButton.Enabled = false;
            }
        }

        private void FinishButtonPressed(object sender, EventArgs e)
        {
            Map_Location[] locs = new Map_Location[markers.Count];
            for (int i = 0; i < markers.Count; i++)
            {
                locs[i] = new Map_Location(markers[i].Position.Latitude, markers[i].Position.Longitude, 15);
            }
            string locJson = JsonConvert.SerializeObject(locs);

            ReturnWithData(locJson);
        }
    }
}
