#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Threading;
using AVFoundation;
using FFImageLoading;
using Foundation;
using OurPlace.iOS.Controllers.Tasks;
using OurPlace.Common.Models;
using UIKit;

namespace OurPlace.iOS
{

    //https://developer.xamarin.com/recipes/ios/media/sound/record_sound/
    public partial class RecordAudioController : TaskViewController
	{
        private AVAudioRecorder recorder;
        private NSDictionary settings;
        private AVAudioSession audioSession;
        private NSError error;
        private Thread clockThread;
        private string fileName;
        private string filePath;
        private string folderName;
        private volatile bool recording;
        private UIColor defaultClockColour;
        public string innerPath;

        public bool createMode;
        private string createDesc = "Record an audio clip for the user to listen to.";

		public RecordAudioController (IntPtr handle) : base (handle)
		{
		}

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            fileName = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss") + ".m4a";

            if(!createMode)
            {
                if(thisTask == null || thisActivity == null)
                {
                    AppUtils.ShowSimpleDialog(this, "ERROR", "Error loading task data", "Ok");
                    NavigationController.PopViewController(true);
                    return;
                }

                TaskDescriptionLabel.Text = thisTask.Description;

                folderName = Common.LocalData.Storage.GetCacheFolder(thisActivity.Id.ToString());
            }
            else
            {
                // set up for recording to 'listen to audio' tasks
                folderName = Common.LocalData.Storage.GetCacheFolder("created");
            }

            filePath = Path.Combine(folderName, fileName);


            // Sanity check for permissions - if we're here, it should be safe
            bool hasPerm = await AppUtils.AuthorizeMic();
            if (!hasPerm)
            {
                AppUtils.ShowSimpleDialog(this, "Requires Microphone", "Please grant OurPlace microphone access in the system settings to record audio clips!", "Ok");
                NavigationController.PopViewController(true);
                return;
            }

            // Set up audio recording session
            audioSession = AVAudioSession.SharedInstance();
            NSError err = audioSession.SetCategory(AVAudioSessionCategory.PlayAndRecord);

            if(err != null)
            {
                Console.WriteLine("ERROR setting up audio session: " + err.LocalizedDescription);
                return;
            }

            err = audioSession.SetActive(true);
            if(err != null)
            {
                Console.WriteLine("ERROR activating audio session: " + err.LocalizedDescription);
                return;
            }

            //set up the NSObject Array of values that will be combined with the keys to make the NSDictionary
            NSObject[] values = new NSObject[]
            {
                NSNumber.FromFloat (16000.0f), //Sample Rate
                NSNumber.FromInt32 ((int)AudioToolbox.AudioFormatType.MPEG4AAC), //AVFormat
                NSNumber.FromInt32 (1), //Channels
                NSNumber.FromInt32 (16), //PCMBitDepth
                NSNumber.FromBoolean (false), //IsBigEndianKey
                NSNumber.FromBoolean (false) //IsFloatKey
            };

            //Set up the NSObject Array of keys that will be combined with the values to make the NSDictionary
            NSObject[] keys = new NSObject[]
            {
                AVAudioSettings.AVSampleRateKey,
                AVAudioSettings.AVFormatIDKey,
                AVAudioSettings.AVNumberOfChannelsKey,
                AVAudioSettings.AVLinearPCMBitDepthKey,
                AVAudioSettings.AVLinearPCMIsBigEndianKey,
                AVAudioSettings.AVLinearPCMIsFloatKey
            };

            //Set Settings with the Values and Keys to create the NSDictionary
            settings = NSDictionary.FromObjectsAndKeys(values, keys);

            //Set recorder parameters
            recorder = AVAudioRecorder.Create(NSUrl.FromFilename(filePath), new AudioSettings(settings), out error);

            recorder.PrepareToRecord();
        }

        partial void RecButtonPressed(NSObject sender)
        {
            Console.WriteLine("Pressed button");
            if(!recording)
            {
                Console.WriteLine("Starting recording");
                ImageService.Instance.LoadCompiledResource("StopButton").Into(RecButton);
                recorder.Record();
                recording = true;
                clockThread = new Thread(UpdateClock);
                clockThread.Start();
            }
            else
            {
                Console.WriteLine("stopping recording");
                recorder.Stop();
                ImageService.Instance.LoadCompiledResource("RecordButton").IntoAsync(RecButton);
                recording = false;
                clockThread.Join();

                Console.WriteLine("Saved audio to: " + filePath);

                innerPath = Path.Combine(Directory.GetParent(filePath).Name, Path.GetFileName(filePath));

                if(createMode)
                {
                    PerformSegue("UnwindToCreateListenAudio", this);
                }
                else
                {
                    ReturnWithData(innerPath);
                }

            }
        }

        private async void UpdateClock()
        {
            try{
                DateTime startedAt = DateTime.Now;

                InvokeOnMainThread(() => {
                    defaultClockColour = RecordTimeLabel.TextColor;
                    RecordTimeLabel.TextColor = UIColor.Red;
                });

                while (recording)
                {
                    TimeSpan diff = DateTime.Now - startedAt;

                    InvokeOnMainThread(() =>
                    {
                        RecordTimeLabel.Text = diff.ToString(@"mm\:ss");
                    });

                    await System.Threading.Tasks.Task.Delay(15);

                }

                Console.WriteLine("Clock finishing");

                InvokeOnMainThread(() =>
                {
                    RecordTimeLabel.Text = "00:00";
                    RecordTimeLabel.TextColor = defaultClockColour;
                });
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
	}
}
