#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using AudioToolbox;
using CoreAnimation;
using CoreGraphics;
using CoreLocation;
using FFImageLoading;
using Foundation;
using MapKit;
using Newtonsoft.Json;
using OurPlace.iOS.Controllers.Tasks;
using OurPlace.Common.Models;
using UIKit;

namespace OurPlace.iOS
{
    //https://github.com/xamarin/ios-samples/blob/master/CoreLocation/MainScreen/MainViewController.cs
    public partial class LocationHuntViewController : TaskViewController
	{
        private CLLocationManager locationManager;
        private LocationHuntLocation target;
        private volatile float lastDistance = 1000;

        private float origAlpha;
        private SystemSound systemSound = new SystemSound(1103);
        private CAAnimationGroup locationAnimations;
        private bool startedAnim;
        private bool stopAnim;
        private bool arrived;

		public LocationHuntViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            stopAnim = true;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            //startedAnim = false;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            locationManager = new CLLocationManager();
            locationManager.LocationsUpdated += LocationUpdated;
            locationManager.RequestWhenInUseAuthorization();

            if (thisTask == null)
            {
                AppUtils.ShowSimpleDialog(this, "ERROR", "Error loading task data", "Ok");
                NavigationController.PopViewController(true);
                return;
            }

            TaskDescLabel.Text = thisTask.Description;

            origAlpha = (float)AnimationImage.Alpha;

            target = JsonConvert.DeserializeObject<LocationHuntLocation>(thisTask.JsonData);

            if(CLLocationManager.LocationServicesEnabled)
            {
                locationManager.StartUpdatingLocation();
            }

            OpenMapButton.Alpha = (target.MapAvailable == null || target.MapAvailable == true) ? 1f : 0f;
            OpenMapButton.TouchUpInside += OpenMapButton_TouchUpInside;
        }

        private void LocationUpdated(object sender, CLLocationsUpdatedEventArgs e)
        {
            if (arrived) return;

            if(!(e?.Locations?.Length > 0))
            {
                Console.WriteLine("No locations");
                return;
            }

            CLLocation lastLoc = e.Locations[e.Locations.Length - 1];

            lastDistance = (float)lastLoc.DistanceFrom(new CLLocation(target.Lat, target.Long));
            string distanceString = "Arrived!";

            if(lastDistance >= 1000)
            {
                distanceString = string.Format("{0} km", (lastDistance / 1000).ToString("N2"));
            }
            else if(lastDistance >= 10)
            {
                distanceString = string.Format("{0} metres", lastDistance.ToString("N0"));
            }

            DistanceLabel.Text = distanceString;
            AccuracyLabel.Text = string.Format("Accuracy: within {0} metres", (lastLoc.HorizontalAccuracy * 2).ToString("N0"));

            if(!startedAnim)
            {
                startedAnim = true;
                Animate();
            }

            if(lastDistance < 10)
            {
                arrived = true;
                locationManager.StopUpdatingLocation();
                AppUtils.ShowSimpleDialog(
                    this,
                    "Finished!",
                    "You\'ve arrived at the destination!",
                    "Got it",
                    (act) => { ReturnWithData(true.ToString()); });
            }
        }

        private void Animate()
        {
            if (stopAnim) return;

            if(locationAnimations != null)
            {
                AnimationImage.Layer.RemoveAnimation("locAnim");
            }

            var locationAnimation = CABasicAnimation.FromKeyPath("opacity");
            locationAnimation.TimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut);
            locationAnimation.From = NSNumber.FromFloat(GetAlpha());
            locationAnimation.To = NSNumber.FromFloat(0.05f);

            var scaleAnimation = CABasicAnimation.FromKeyPath("transform.scale");
            scaleAnimation.TimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut);
            scaleAnimation.From = NSNumber.FromFloat(1.1f);
            scaleAnimation.To = NSNumber.FromFloat(1);;

            locationAnimations = CAAnimationGroup.CreateAnimation();
            locationAnimations.Duration = GetAnimationDuration();
            locationAnimations.AutoReverses = true;
            locationAnimations.Animations = new CAAnimation[] { scaleAnimation, locationAnimation };
            locationAnimations.AnimationStopped += (sender, e) => {
                Animate();
            };

            AnimationImage.Layer.AddAnimation(locationAnimations, "locAnim");
            systemSound.PlaySystemSound();
        }

        private double GetAnimationDuration()
        {
            return Math.Max(Math.Min(1.5, lastDistance / 200), 0.1);
        }

        private float GetAlpha()
        {
            float opacity = origAlpha;

            if (lastDistance <= 10)
            {
                opacity = 1;
            }
            else if (lastDistance < 200)
            {
                float calcOpacity = 1 - (float)lastDistance / 200;
                if (calcOpacity > opacity) opacity = calcOpacity;
            }

            return opacity;
        }


        private void OpenMapButton_TouchUpInside(object sender, EventArgs e)
        {
            CLLocationCoordinate2D coord = new CLLocationCoordinate2D(target.Lat, target.Long);

            MKMapItem mapItem = new MKMapItem(new MKPlacemark(coord))
            {
                Name = "Target Location"
            };

            MKLaunchOptions launchOptions = new MKLaunchOptions
            {
                DirectionsMode = MKDirectionsMode.Walking
            };

            mapItem.OpenInMaps(launchOptions);
        }

	}
}
