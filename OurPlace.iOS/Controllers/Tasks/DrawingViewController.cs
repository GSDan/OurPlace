#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CoreGraphics;
using FFImageLoading;
using Foundation;
using Newtonsoft.Json;
using OurPlace.iOS.Controllers.Tasks;
using OurPlace.iOS.Helpers;
using OurPlace.Common;
using PopColorPicker.iOS;
using UIKit;

namespace OurPlace.iOS
{
    //https://www.raywenderlich.com/87899/make-simple-drawing-app-uikit-swift
	public partial class DrawingViewController : TaskViewController
	{
        private PopColorPickerViewController colourPickerViewController;
        private UIControl selectedColour;
        public string previousImage;

        public DrawingViewController(IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad()
        {
            colourPickerViewController = new PopColorPickerViewController();

            colourPickerViewController.CancelButton.Clicked += (object sender, EventArgs e) =>
            {
                DismissViewController(true, null);
            };

            colourPickerViewController.DoneButton.Clicked += (object sender, EventArgs e) =>
            {
                DismissViewController(true, null);
                selectedColour.Layer.BackgroundColor = colourPickerViewController.SelectedColor.CGColor;
                SelectColour(selectedColour);
            };

            ChangeColourButton.TouchUpInside += ChangeColourButtonPressed;
            Colour1.TouchUpInside += ColourTouched;
            Colour2.TouchUpInside += ColourTouched;
            SelectColour(Colour1);

            TouchToCanvas.canvasImg = Canvas;
            TouchToCanvas.canvasTempImg = TempCanvas;
            BrushSlider.SetValue(8, false);
            UpdateBrushPreview();

            if(thisTask.TaskType.IdName == "DRAW_PHOTO")
            {
                var suppress = LoadBGImage();
            }

            // Add save icon
            UIBarButtonItem saveButton = new UIBarButtonItem(
                    UIImage.FromBundle("SaveIcon"),
                    UIBarButtonItemStyle.Plain,
                    (s, e) => {
                        var suppressWarning = SaveAndReturn();
                    }
                );

            NavigationItem.RightBarButtonItem = saveButton;
        }

        private async Task SaveAndReturn()
        {
            // save drawing to uiimage object
            UIGraphics.BeginImageContext(Canvas.Bounds.Size);
            if (thisTask.TaskType.IdName == "DRAW_PHOTO")
            {
                BGImage.Layer.RenderInContext(UIGraphics.GetCurrentContext());
            }
            Canvas.Layer.RenderInContext(UIGraphics.GetCurrentContext());

            UIImage finalImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();

            // write the uiimage to drive and return
            string folderName = Common.LocalData.Storage.GetCacheFolder(thisActivity.Id.ToString());
            string fileName = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss") + ".jpg";
            string innerPath = Path.Combine(thisActivity.Id.ToString(), fileName);
            string filePath = Path.Combine(folderName, fileName);

            if(finalImage.AsJPEG(0.8f).Save(filePath, false, out NSError saveError))
            {
                Console.WriteLine("Saved drawing to: " + filePath);
                ReturnWithData(innerPath);
            }
            else
            {
                Console.WriteLine("ERROR saving to " + fileName + " because " + saveError.LocalizedDescription);
            }
        }

        private async Task LoadBGImage()
        {
            string localRes = "";

            //check to see if the image to be drawn upon is from a prior task
            if(string.IsNullOrWhiteSpace(previousImage))
            {
                localRes = Common.LocalData.Storage.GetCacheFilePath(
                    thisTask.JsonData,
                    thisActivity.Id,
                    ServerUtils.GetFileExtension(thisTask.TaskType.IdName));   
            }
            else
            {
                localRes =  Path.Combine(Common.LocalData.Storage.GetCacheFolder(), previousImage);
            }

            ImageService.Instance.LoadFile(localRes).Into(BGImage);
        }

        private void ChangeColourButtonPressed(object sender, EventArgs e)
        {
            var navController = new UINavigationController(colourPickerViewController);
            PresentViewController(navController, true, null);
        }

        private void ColourTouched(object sender, EventArgs e)
        {
            SelectColour(sender as UIControl);
        }

        private void SelectColour(UIControl selected)
        {
            if(selectedColour != null)
            {
                selectedColour.Layer.BorderWidth = 0;
            }

            selectedColour = selected;
            selectedColour.Layer.BorderColor = UIColor.FromRGB(76, 175, 80).CGColor;
            selectedColour.Layer.BorderWidth = 2.5f;
            TouchToCanvas.ChangeColour(selectedColour.Layer.BackgroundColor);
        }

        partial void SliderValueChanged(NSObject sender)
        {
            TouchToCanvas.ChangeBrushWidth(BrushSlider.Value);
            UpdateBrushPreview();
        }

        private void UpdateBrushPreview()
        {
            nfloat size = BrushPreview.Frame.Size.Width;
            nfloat middle = size / 2;

            UIGraphics.BeginImageContext(BrushPreview.Frame.Size);
            var context = UIGraphics.GetCurrentContext();

            context.SetLineCap(CGLineCap.Round);
            context.SetLineWidth(BrushSlider.Value);

            context.SetStrokeColor(0, 0, 0, 1);
            context.MoveTo(middle, middle);
            context.AddLineToPoint(middle, middle);
            context.StrokePath();
            BrushPreview.Image = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
        }
    }
}
