#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using GlobalToast;
using Newtonsoft.Json;
using OurPlace.iOS.Cells;
using OurPlace.iOS.Delegates;
using OurPlace.iOS.ViewSources;
using OurPlace.Common.LocalData;
using OurPlace.Common.Models;
using UIKit;
using System.Threading.Tasks;
using CoreGraphics;
using OurPlace.iOS.Helpers;
using OurPlace.Common;
using System.Linq;

namespace OurPlace.iOS
{
    public partial class CreatedActivitiesController : UICollectionViewController
    {
        private ActivityViewSource source;
        private UIRefreshControl refreshControl;
        private List<LearningActivity> unsubmittedActivities;
        private DatabaseManager dbManager;
        private LearningActivity activityToEdit;
        private CGRect screenBounds;
        private LoadingOverlay loadPop;
        private bool loading;
        private bool hasContent;

        public CreatedActivitiesController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            if (TabBarController != null)
            {
                TabBarController.NavigationItem.Title = "My Activities";

                TabBarController.NavigationItem.LeftBarButtonItem = null;

                TabBarController.NavigationItem.RightBarButtonItem = new UIBarButtonItem(
                    UIBarButtonSystemItem.Add, CreateNewActivity);
            }
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            screenBounds = UIScreen.MainScreen.Bounds;

            collectionView.RegisterNibForCell(ActivityCollectionCell.Nib, ActivityCollectionCell.Key);
            collectionView.RegisterNibForSupplementaryView(FeedSectionHeader.Nib, UICollectionElementKindSectionKey.Header, FeedSectionHeader.Key);

            source = new ActivityViewSource();

            refreshControl = new UIRefreshControl();
            refreshControl.TintColor = AppUtils.AppMainColour;
            refreshControl.ValueChanged += (sender, e) =>
            {
                RefreshFeed();
            };

            collectionView.ShowsHorizontalScrollIndicator = false;
            collectionView.RefreshControl = refreshControl;
            collectionView.Source = source;
            collectionView.AllowsSelection = true;
            collectionView.Delegate = new SectionedClickableDelegate((section, index) =>
            {
                LearningActivity thisActivity = source.Rows[section]?.Activities[index];

                if (thisActivity == null) return;

                if (unsubmittedActivities != null && unsubmittedActivities.Exists((LearningActivity obj) => { return obj.Id == thisActivity.Id; }))
                {
                    LocalActivityTapped(thisActivity);
                }
                else
                {
                    RemoteActivityTapped(thisActivity);
                }
            });
        }

        private void ShowLoadingOverlay()
        {
            if (loadPop == null)
            {
                loadPop = new LoadingOverlay(screenBounds);
            }

            if (!loading)
            {
                loadPop.loadingLabel.Text = "Loading...";
                View.Add(loadPop);
                loading = true;
            }
        }

        private void HideLoadingOverlay()
        {
            if (loading)
            {
                loadPop.Hide();
                loading = false;
            }
        }

        private void LocalActivityTapped(LearningActivity activity)
        {
            UIAlertController alert = UIAlertController.Create("What do you want to do?", "This activity has yet to be uploaded" + activity.InviteCode, UIAlertControllerStyle.ActionSheet);
            alert.AddAction(UIAlertAction.Create("Continue Editing", UIAlertActionStyle.Default, (a) =>
            {
                activityToEdit = activity;
                PerformSegue("CreateActivitySegue", this);
            }));
            alert.AddAction(UIAlertAction.Create("Delete", UIAlertActionStyle.Destructive, (a) =>
            {
                PromptDelete(activity, false);
            }));
            alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, null));

            // On iPad, it's a pop up. Stick it in the center of the screen
            UIPopoverPresentationController popCont = alert.PopoverPresentationController;
            if (popCont != null)
            {
                popCont.SourceView = View;
                popCont.SourceRect = new CGRect(View.Bounds.GetMidX(), View.Bounds.GetMidY(), 0, 0);
                popCont.PermittedArrowDirections = 0;
            }

            PresentViewController(alert, true, null);
        }

        private void RemoteActivityTapped(LearningActivity activity)
        {
            UIAlertController alert = UIAlertController.Create("What do you want to do?", "This activity's share code: " + activity.InviteCode, UIAlertControllerStyle.ActionSheet);
            alert.AddAction(UIAlertAction.Create("Open", UIAlertActionStyle.Default, (a) =>
            {
                var suppress = AppUtils.OpenActivity(activity, Storyboard, NavigationController);
            }));
            alert.AddAction(UIAlertAction.Create("Copy Share Code", UIAlertActionStyle.Default, (a) =>
            {
                UIPasteboard clipboard = UIPasteboard.General;
                clipboard.String = activity.InviteCode;
                Toast.ShowToast("Copied Code");
            }));
            alert.AddAction(UIAlertAction.Create("Delete", UIAlertActionStyle.Destructive, (a) =>
            {
                PromptDelete(activity, true);
            }));
            alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, null));

            // On iPad, it's a pop up. Stick it in the center of the screen
            UIPopoverPresentationController popCont = alert.PopoverPresentationController;
            if (popCont != null)
            {
                popCont.SourceView = View;
                popCont.SourceRect = new CGRect(View.Bounds.GetMidX(), View.Bounds.GetMidY(), 0, 0);
                popCont.PermittedArrowDirections = 0;
            }

            PresentViewController(alert, true, null);
        }

        private void PromptDelete(LearningActivity activity, bool isRemote)
        {
            AppUtils.ShowChoiceDialog(
                this,
                string.Format("Delete '{0}'?", activity.Name),
                "Are you sure you want to delete this activity? This can't be undone.",
                "Delete", (res) =>
                {
                    if (isRemote)
                    {
                        var suppress = DeleteRemoteActivity(res);
                    }
                    else
                    {
                        DeleteLocalActivity(activity);
                    }

                },
                "Cancel",
                null, activity);
        }

        private void DeleteLocalActivity(LearningActivity activity)
        {
            Storage.DeleteInProgress(activity);
            unsubmittedActivities.Remove(activity);
            dbManager.currentUser.LocalCreatedActivitiesJson = JsonConvert.SerializeObject(unsubmittedActivities);
            dbManager.AddUser(dbManager.currentUser);
            Toast.ShowToast("Activity Deleted");
            RefreshFeed();
        }

        private async Task DeleteRemoteActivity(LearningActivity activity)
        {
            ShowLoadingOverlay();
            ServerResponse<string> resp = await ServerUtils.Delete<string>("/api/learningactivities?id=" + activity.Id);
            HideLoadingOverlay();

            if (resp == null)
            {
                var suppress = AppUtils.SignOut(this);
                return;
            }

            if (resp.Success)
            {
                dbManager.DeleteCachedActivity(activity);
                Toast.ShowToast("Activity Deleted");
            }
            else
            {
                Toast.ShowToast("Error connecting to the server");
            }

            RefreshFeed();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            collectionView.ContentOffset = new CoreGraphics.CGPoint(0, -refreshControl.Frame.Size.Height);

            RefreshFeed();
        }

        private void CreateNewActivity(object sender, EventArgs e)
        {
            activityToEdit = null;
            PerformSegue("CreateActivitySegue", this);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier.Equals("CreateActivitySegue"))
            {
                var viewController = (Create_ActivityOverviewController)segue.DestinationViewController;
                viewController.thisActivity = activityToEdit;
            }
        }

        private void ShowLoading()
        {
            if (!refreshControl.Refreshing)
            {
                refreshControl.BeginRefreshing();
            }
        }

        private void HideLoading()
        {
            if (refreshControl.Refreshing)
            {
                refreshControl.EndRefreshing();
                if (collectionView.NumberOfSections() > 0 && hasContent)
                {
                    collectionView.ScrollToItem(NSIndexPath.FromRowSection(0, 0), UICollectionViewScrollPosition.Bottom, true);
                }
            }
        }

        private async void RefreshFeed()
        {
            ShowLoading();

            if (dbManager == null)
            {
                dbManager = await Storage.GetDatabaseManager();
            }

            // If we don't have internet, don't bother getting the location or 
            // polling the server
            if (!AppDelegate.Online)
            {
                Console.WriteLine("No Internet access, loading cached feed");
                Toast.ShowToast("Couldn't reach the server - please check your connection!");
                AppDelegate.WhenOnline = RefreshFeed; // Reload if connection returns
                HideLoading();
                return;
            }

            Common.ServerResponse<List<LearningActivity>> results =
                await Common.ServerUtils.Get<List<LearningActivity>>(
                    "/api/learningactivities/getfromuser/?creatorId=" + dbManager.currentUser.Id);

            if (results == null)
            {
                var suppress = AppUtils.SignOut(this);
            }

            List<ActivityFeedSection> feed = new List<ActivityFeedSection>();


            string unsubmittedActivitiesJson = dbManager.currentUser.LocalCreatedActivitiesJson;
            unsubmittedActivities = null;

            if (!string.IsNullOrWhiteSpace(unsubmittedActivitiesJson))
            {
                unsubmittedActivities = JsonConvert.DeserializeObject<List<LearningActivity>>(
                    unsubmittedActivitiesJson,
                    new JsonSerializerSettings
                    {
                        TypeNameHandling = TypeNameHandling.Objects,
                        ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                        MaxDepth = 10
                    });
            }

            // Add a section to the feed if the user has activities which they didn't finish creating
            if (unsubmittedActivities != null && unsubmittedActivities.Count > 0)
            {
                feed.Add(new ActivityFeedSection
                {
                    Title = "In Progress",
                    Description = "Tap to continue making these activities.",
                    Activities = unsubmittedActivities
                });
            }

            List<LearningActivity> activitiesList = null;

            if (results.Success && results.Data != null)
            {
                activitiesList = results.Data.OrderByDescending((LearningActivity arg) => arg.CreatedAt).ToList();

                // Save this in the offline cache
                dbManager.currentUser.RemoteCreatedActivitiesJson = JsonConvert.SerializeObject(results.Data,
                    new JsonSerializerSettings
                    {
                        TypeNameHandling = TypeNameHandling.Objects,
                        ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                        MaxDepth = 6
                    });
                dbManager.AddUser(dbManager.currentUser);
            }
            else
            {
                Toast.ShowToast("Couldn't reach the server - please check your connection!");
                if (!string.IsNullOrWhiteSpace(dbManager.currentUser.RemoteCreatedActivitiesJson))
                {
                    activitiesList = JsonConvert.DeserializeObject<List<LearningActivity>>(
                        dbManager.currentUser.RemoteCreatedActivitiesJson);
                }
            }

            if (activitiesList != null && activitiesList.Count > 0)
            {
                feed.Add(new ActivityFeedSection
                {
                    Title = "Your Uploaded Activities",
                    Description = "These are the activities that you have previously uploaded",
                    Activities = activitiesList
                });
            }

            hasContent = feed.Count > 0;

            if (feed.Count == 0)
            {
                feed.Add(new ActivityFeedSection
                {
                    Title = "No Activities Created",
                    Description = "You haven't made any activities yet! Click the '+' button in the top right to get started.",
                    Activities = new List<LearningActivity>()
                });
            }

            source.Rows = feed;

            collectionView.ReloadData();

            HideLoading();
        }
    }
}
