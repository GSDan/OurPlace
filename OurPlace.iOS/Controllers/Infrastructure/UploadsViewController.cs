#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CoreGraphics;
using GlobalToast;
using Newtonsoft.Json;
using OurPlace.iOS.Delegates;
using OurPlace.iOS.Helpers;
using OurPlace.iOS.ViewSources;
using OurPlace.Common;
using OurPlace.Common.LocalData;
using OurPlace.Common.Models;
using Plugin.Connectivity;
using UIKit;

namespace OurPlace.iOS
{
    public partial class UploadsViewController : UITableViewController
    {
        private UploadViewSource viewSource;
        private CGRect screenBounds;
        private LoadingOverlay loadPop;
        private bool loading;

        public UploadsViewController(IntPtr handle) : base(handle)
        {
        }

        public override async void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            viewSource.UpdateData((await Storage.GetDatabaseManager()).GetUploadQueue().ToList());
            TableView.ReloadData();

            ManageNavItems();
        }

        private void ManageNavItems()
        {
            if (TabBarController != null)
            {
                TabBarController.NavigationItem.Title = "Uploads Queue";

                TabBarController.NavigationItem.LeftBarButtonItem = null;

                TabBarController.NavigationItem.RightBarButtonItem = (viewSource?.Rows?.Count > 0) ?
                    new UIBarButtonItem("Upload All", UIBarButtonItemStyle.Plain, UploadAllButton_TouchUpInside)
                    : null;
            }
        }

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            screenBounds = UIScreen.MainScreen.Bounds;

            viewSource = new UploadViewSource(
                (await Storage.GetDatabaseManager()).GetUploadQueue().ToList());

            TableView.Source = viewSource;
            TableView.Delegate = new ClickableTableDelegate((index) =>
            {
                AppUtils.ShowThreeChoiceDialog(this,
                    "Pending Upload",
                    "What would you like to do with these files?",
                    "Upload to Server",
                    CheckCanUpload,
                    "Delete files",
                    CheckShouldDelete,
                    "Cancel",
                    null,
                    index);
            });
            TableView.RowHeight = 110;

            UploadAllButton.TouchUpInside += UploadAllButton_TouchUpInside;
        }

        private void UploadAllButton_TouchUpInside(object sender, EventArgs e)
        {
            string message = "Are you sure you want to upload all of the items in the queue?";

            // Check if on WiFi
            var currentConnections = CrossConnectivity.Current.ConnectionTypes;
            if (!currentConnections.Contains(Plugin.Connectivity.Abstractions.ConnectionType.WiFi))
            {
                message += "\nWARNING: You are not on WiFi! You may incur additional network charges!";
            }

            AppUtils.ShowChoiceDialog(
                    this,
                    "Upload all items?",
                    message,
                    "Yes, upload",
                    (a) => { var suppress = UploadAll(); },
                    "Cancel",
                    null,
                    1);
        }

        private async Task UploadAll()
        {
            ShowLoading();
            List<AppDataUpload> queue = viewSource.Rows;
            bool success = true;

            foreach (var item in queue)
            {
                int index = viewSource.Rows.FindIndex((lhs) => lhs.ItemId == item.ItemId);
                if (index != -1)
                {
                    success = await UploadResults(index, null);

                    if (!success)
                    {
                        return;
                    }
                }
            }

            UploadsComplete();
        }

        private void CheckShouldDelete(int index)
        {
            AppUtils.ShowChoiceDialog(
                    this,
                    "Delete?",
                    "Are you sure you want to delete these files? This can't be undone!",
                    "Delete",
                    (resIndex) => { var suppress = DeleteResults(resIndex); },
                    "Cancel",
                    null,
                    index);
        }

        private void ShowLoading()
        {
            if (loadPop == null)
            {
                loadPop = new LoadingOverlay(screenBounds);
            }

            if (!loading)
            {
                loadPop.loadingLabel.Text = "Loading...";
                View.Add(loadPop);
                loading = true;
            }
        }

        private void HideLoading()
        {
            if (loading)
            {
                loadPop.Hide();
                loading = false;
            }
        }

        private async Task DeleteResults(int index)
        {
            ShowLoading();

            AppDataUpload thisUpload = viewSource.Rows[index];

            List<FileUpload> files = JsonConvert.DeserializeObject<List<FileUpload>>(thisUpload.FilesJson);
            string uploadsFolderPath = (thisUpload.UploadType == UploadType.NewActivity) ?
                Storage.GetCacheFolder() : Storage.GetUploadsFolder();

            foreach (FileUpload up in files)
            {
                string absPath = Path.Combine(uploadsFolderPath, up.LocalFilePath);
                if (File.Exists(absPath))
                {
                    File.Delete(absPath);
                }
            }

            DatabaseManager dbManager = await Storage.GetDatabaseManager();

            dbManager.DeleteUpload(viewSource.Rows[index]);

            List<AppDataUpload> newList = dbManager.GetUploadQueue().ToList();

            viewSource.Rows.RemoveAt(index);
            viewSource.UpdateData(newList);
            TableView.ReloadData();

            await (ParentViewController as MainTabBarController).UpdateUploadsBadge(newList.Count);
            ManageNavItems();

            HideLoading();

            Toast.ShowToast("Deleted");
        }

        private void CheckCanUpload(int index)
        {
            if (!CrossConnectivity.Current.IsConnected)
            {
                AppUtils.ShowSimpleDialog(this, "Unable to Upload", "An Internet connection is required.", "Got it");
                return;
            }

            // Check if on WiFi
            var currentConnections = CrossConnectivity.Current.ConnectionTypes;
            if (!currentConnections.Contains(Plugin.Connectivity.Abstractions.ConnectionType.WiFi))
            {
                AppUtils.ShowChoiceDialog(
                    this,
                    "You're not on WiFi!",
                    "Uploading over mobile data could incur additional charges. Are you sure you want to upload without a WiFi connection?",
                    "Yes, upload",
                    (resIndex) => { var suppress = UploadResults(resIndex, UploadsComplete); },
                    "Cancel",
                    null,
                    index);
            }
            else
            {
                var suppress = UploadResults(index, UploadsComplete);
            }
        }

        private void UploadsComplete()
        {
            AppUtils.ShowSimpleDialog(this, "Uploaded!", "Successfully uploaded. Go to ourplace.app to view your submissions!", "Got it");

        }

        private async Task<bool> UploadResults(int index, Action OnFinish)
        {
            ShowLoading();

            AppDataUpload upload = viewSource.Rows[index];

            DatabaseManager dbManager = await Storage.GetDatabaseManager();

            // Upload relevent files
            bool success = await Storage.UploadFiles(
                JsonConvert.DeserializeObject<List<FileUpload>>(upload.FilesJson),
                index,
                (percentage) =>
                {
                    Console.WriteLine("Upload percentage: " + percentage);
                    loadPop.loadingLabel.Text = string.Format("Uploading: {0}%", percentage);
                },
                (listPos, jsonData) =>
                {
                    viewSource.Rows[listPos].FilesJson = jsonData;
                    dbManager.UpdateUpload(viewSource.Rows[listPos]);
                    viewSource.UpdateData(dbManager.GetUploadQueue().ToList());
                    upload = viewSource.Rows[index];
                },
                (upload.UploadType == UploadType.NewActivity) ? Storage.GetCacheFolder() : Storage.GetUploadsFolder()
            );

            if (!success)
            {
                HideLoading();
                AppUtils.ShowSimpleDialog(this, "Unable to Upload", "Something went wrong, please try again later.", "Got it");
                return false;
            }

            ServerResponse<string> resp = new ServerResponse<string>();

            if (upload.UploadType == UploadType.NewActivity)
            {
                resp = await ServerUtils.UploadNewActivity(upload);
            }
            else
            {
                // Uploading activity results
                List<FileUpload> files = JsonConvert.DeserializeObject<List<FileUpload>>(upload.FilesJson);

                AppTask[] results = JsonConvert.DeserializeObject<AppTask[]>(upload.JsonData) ?? new AppTask[0];
                resp = await ServerUtils.UpdateAndPostResults(results, files, upload.UploadRoute);
            }

            HideLoading();

            if (resp == null)
            {
                // do this but for iOS, fool
                var suppress = AppUtils.SignOut(this);
                return false;
            }

            if (!resp.Success)
            {
                AppUtils.ShowSimpleDialog(this, "Unable to Upload", "Something went wrong, please try again later.", "Got it");
                return false;
            }

            dbManager.DeleteUpload(upload);

            var newList = dbManager.GetUploadQueue().ToList();

            viewSource.UpdateData(newList);
            TableView.ReloadData();

            await (ParentViewController as MainTabBarController).UpdateUploadsBadge(newList.Count);
            ManageNavItems();

            OnFinish?.Invoke();

            return true;
        }
    }
}
