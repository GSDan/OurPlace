#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreLocation;
using Foundation;
using Google.Maps;
using OurPlace.Common.Models;
using UIKit;

namespace OurPlace.iOS
{
    public partial class Create_ChooseLocationController : UIViewController
	{
        public Map_Location chosenLocation;
        private Marker currentMarker;
        private bool movedCam;

		public Create_ChooseLocationController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            mapView.MapType = MapViewType.Hybrid;
            mapView.CoordinateTapped += CoordinateTapped;

            // Listen to the myLocation property of GMSMapView.
            mapView.AddObserver(this, new NSString("myLocation"), NSKeyValueObservingOptions.New, IntPtr.Zero);

            if(chosenLocation != null)
            {
                PlaceMarkerAtCoord(new CLLocationCoordinate2D(chosenLocation.Lat, chosenLocation.Long));
            }

            // Ask for My Location data after the map has already been added to the UI.
            InvokeOnMainThread(() => mapView.MyLocationEnabled = true);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
            mapView.RemoveObserver(this, new NSString("myLocation"));
        }

        public override void ObserveValue(NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr context)
        {
            var thisLoc = (change.ObjectForKey(ChangeNewKey) as CLLocation).Coordinate;
            if (!movedCam)
            {
                // Move camera to first location update
                movedCam = true;
                mapView.Camera = CameraPosition.FromCamera(thisLoc, 16);
            }
        }

        private void CoordinateTapped(object sender, GMSCoordEventArgs e)
        {
           PlaceMarkerAtCoord(e.Coordinate);
        }

        private void PlaceMarkerAtCoord(CLLocationCoordinate2D coord)
        {
            var color = UIColor.FromHSBA((float)AppUtils.GetRandomNumber(), 1, 1, 1.0f);

            if(currentMarker != null)
            {
                currentMarker.Map = null;
            }

            currentMarker = Marker.FromPosition(coord);
            currentMarker.AppearAnimation = MarkerAnimation.Pop;
            currentMarker.Icon = Marker.MarkerImage(color);
            currentMarker.Map = mapView;
            chosenLocation = new Map_Location(coord.Latitude, coord.Longitude, 15f);
        }

    }
}
