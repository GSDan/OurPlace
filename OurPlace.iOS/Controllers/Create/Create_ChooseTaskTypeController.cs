#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Foundation;
using OurPlace.iOS.Helpers;
using OurPlace.iOS.ViewSources;
using OurPlace.Common.LocalData;
using OurPlace.Common.Models;
using UIKit;

namespace OurPlace.iOS
{
	public partial class Create_ChooseTaskTypeController : UITableViewController
	{
        public LearningActivity thisActivity;
        public int parentTaskIndex;
        public int? childTaskIndex; 

        private LoadingOverlay loadPop;
        private List<TaskType> taskTypes;
        private TaskType chosen;

		public Create_ChooseTaskTypeController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var suppress = LoadData();
        }

        private async Task LoadData()
        {
            DatabaseManager dbManager = await Storage.GetDatabaseManager();
            taskTypes = dbManager.GetTaskTypes()?.ToList();

            if (taskTypes == null || taskTypes.Count == 0)
            {
                var bounds = UIScreen.MainScreen.Bounds;

                // show the loading overlay on the UI thread using the correct orientation sizing
                loadPop = new LoadingOverlay(bounds);
                View.Add(loadPop);

                Common.ServerResponse<TaskType[]> response = await Common.ServerUtils.GetTaskTypes();

                loadPop.Hide();

                if (response.Success)
                {
                    taskTypes = response.Data.ToList();
                    taskTypes = taskTypes.OrderBy((arg) => arg.Order).ToList();
                    dbManager.AddTaskTypes(taskTypes);
                    ShowTaskTypes();
                }
                else
                {
                    AppUtils.ShowSimpleDialog(this, "Error",
                                              "There was an issue communicating with the server. " +
                                              "Please check your Internet connection and try again later.",
                                              "Got it",
                                              (a) => { NavigationController.PopViewController(true); });
                }
            }
            else
            {
                taskTypes = taskTypes.OrderBy((arg) => arg.Order).ToList();
                ShowTaskTypes();
            }
        }

        private void ShowTaskTypes()
        {
            TableView.Source = new TaskTypeViewSource(taskTypes, TypeChosen);
        }

        private void TypeChosen(TaskType returned)
        {
            chosen = returned;

            switch(returned.IdName)
            {
                case "LISTEN_AUDIO":
                    PerformSegue("CreateNewListenAudioTask", this);
                    break;
                case "INFO":
                    PerformSegue("CreateNewInfoTask", this);
                    break;
                case "MULT_CHOICE":
                    PerformSegue("CreateNewMultiChoiceTask", this);
                    break;
                case "MAP_MARK":
                    PerformSegue("CreateNewMapMarkTask", this);
                    break;
                case "LOC_HUNT":
                    PerformSegue("CreateNewLocationHuntTask", this);
                    break;
                case "MATCH_PHOTO":
                case "DRAW_PHOTO":
                    PerformSegue("CreateNewChoosePhotoTask", this);
                    break;
                default:
                    PerformSegue("CreateNewTaskOfType", this);
                    break;
            }

        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            var viewController = (Create_EditTaskController)segue.DestinationViewController;
            viewController.thisActivity = thisActivity;
            viewController.parentTaskIndex = parentTaskIndex;
            viewController.childTaskIndex = childTaskIndex;
            viewController.thisTaskType = chosen;

        }
    }
}
