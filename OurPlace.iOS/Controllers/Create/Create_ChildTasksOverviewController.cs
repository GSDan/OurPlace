#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Foundation;
using Newtonsoft.Json;
using OurPlace.Common.LocalData;
using OurPlace.Common.Models;
using OurPlace.iOS.Controllers.Create;
using OurPlace.iOS.ViewSources;
using UIKit;

namespace OurPlace.iOS
{
    public partial class Create_ChildTasksOverviewController : UITableViewController
    {
        public LearningActivity thisActivity;
        public int parentTaskIndex;

        private LearningTask thisTask;
        private int childToEditIndex;

        public Create_ChildTasksOverviewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            NavigationItem.Title = "Follow-Up Tasks";
            NavigationItem.RightBarButtonItem = new UIBarButtonItem(
                UIBarButtonSystemItem.Add, AddNewTask);

            TableView.RowHeight = UITableView.AutomaticDimension;
            TableView.EstimatedRowHeight = 180;

            thisTask = thisActivity.LearningTasks.ToList()[parentTaskIndex];

            headerLabel.Text = string.Format(headerLabel.Text, thisTask.TaskType.DisplayName);
            FinishButton.TouchUpInside += FinishButton_TouchUpInside;
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            if (thisTask.ChildTasks == null ||
                !thisTask.ChildTasks.Any())
            {
                FinishButton.SetTitle("Add follow-up tasks by tapping +!", UIControlState.Normal);
            }
            else
            {
                FinishButton.SetTitle("Save and Return", UIControlState.Normal);
                TableView.Source = new CreateViewSource(thisTask.ChildTasks.ToList(), EditTask, null, false);
            }
        }

        public void FinishButton_TouchUpInside(object sender, EventArgs e)
        {
            if (thisTask.ChildTasks.Any())
            {
                PerformSegue("UnwindToOverview", this);
            }
            else
            {
                PerformSegue("ChooseTaskTypeChild", this);
            }
        }


        private void AddNewTask(object sender, EventArgs e)
        {
            PerformSegue("ChooseTaskTypeChild", this);
        }

        private void EditTask(int index)
        {
            childToEditIndex = index;

            LearningTask toEdit = thisTask.ChildTasks.ElementAt(index);

            switch (toEdit.TaskType.IdName)
            {
                case "LISTEN_AUDIO":
                    PerformSegue("EditListenAudioChildTask", this);
                    break;
                case "INFO":
                    PerformSegue("EditInfoChildTask", this);
                    break;
                case "MULT_CHOICE":
                    PerformSegue("EditMultiChoiceChildTask", this);
                    break;
                case "MAP_MARK":
                    PerformSegue("EditMapMarkChildTask", this);
                    break;
                case "LOC_HUNT":
                    PerformSegue("EditLocationHuntChildTask", this);
                    break;
                case "DRAW_PHOTO":
                case "MATCH_PHOTO":
                    PerformSegue("EditChoosePhotoChildTask", this);
                    break;
                default:
                    PerformSegue("EditChildTask", this);
                    break;
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (new string[]{
                    "EditChildTask",
                    "EditChoosePhotoChildTask",
                    "EditLocationHuntChildTask",
                    "EditMapMarkChildTask",
                    "EditMultiChoiceChildTask",
                    "EditInfoChildTask",
                    "EditListenAudioChildTask"
                }.Contains(segue.Identifier))
            {
                var viewController = (Create_EditTaskController)segue.DestinationViewController;
                viewController.thisActivity = thisActivity;
                viewController.parentTaskIndex = parentTaskIndex;
                viewController.childTaskIndex = childToEditIndex;
            }
            else if (segue.Identifier.Equals("ChooseTaskTypeChild"))
            {
                var viewController = (Create_ChooseTaskTypeController)segue.DestinationViewController;
                viewController.thisActivity = thisActivity;
                viewController.parentTaskIndex = parentTaskIndex;
                viewController.childTaskIndex = (thisTask.ChildTasks == null) ? 0 : thisTask.ChildTasks.Count();
            }
        }

        // All activity editing controllers end up back here. 
        [Action("UnwindToChildrenOverview:")]
        public void UnwindToChildrenOverview(UIStoryboardSegue segue)
        {
            var sourceController = segue.SourceViewController as Create_BaseSegueController;

            if (sourceController != null)
            {
                if (sourceController.wasCancelled && thisActivity == null)
                {
                    // If the user cancelled without any info being saved, 
                    // return to the previous screen
                    NavigationController.PopViewController(true);
                    return;
                }

                thisActivity = sourceController.thisActivity;
                thisTask = thisActivity.LearningTasks.ToList()[parentTaskIndex];

                var suppress = SaveProgress();
            }
        }

        private async Task SaveProgress()
        {
            DatabaseManager dbManager = await Storage.GetDatabaseManager(false);

            // Add/update this new activity in the user's inprogress cache
            string cacheJson = dbManager.currentUser.LocalCreatedActivitiesJson;

            List<LearningActivity> inProgress = (string.IsNullOrWhiteSpace(cacheJson)) ?
                new List<LearningActivity>() :
                JsonConvert.DeserializeObject<List<LearningActivity>>(cacheJson);

            int existingInd = inProgress.FindIndex((la) => la.Id == thisActivity.Id);

            if (existingInd == -1)
            {
                inProgress.Insert(0, thisActivity);
            }
            else
            {
                inProgress.RemoveAt(existingInd);
                inProgress.Insert(0, thisActivity);
            }

            dbManager.currentUser.LocalCreatedActivitiesJson = JsonConvert.SerializeObject(inProgress);
            dbManager.AddUser(dbManager.currentUser);

        }
    }
}
