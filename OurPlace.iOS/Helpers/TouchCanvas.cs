#region copyright
/*
    OurPlace is a mobile learning platform, designed to support communities
    in creating and sharing interactive learning activities about the places they care most about.
    https://github.com/GSDan/OurPlace
    Copyright (C) 2018 Dan Richardson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/
#endregion

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using CoreGraphics;
using Foundation;
using UIKit;

namespace OurPlace.iOS
{
	public partial class TouchCanvas : UIView
	{
        public UIImageView canvasImg;
        public UIImageView canvasTempImg;
        private CGPoint lastPoint = CGPoint.Empty;
        private CGColor colour = new CGColor(0, 0, 0);
        private float brushWidth = 7;
        private float opacity = 1;
        private bool swiped;

        public TouchCanvas(IntPtr handle) : base(handle)
        {
        }

        public void ChangeColour(CGColor newColour)
        {
            colour = newColour;
        }

        public void ChangeBrushWidth(float newWidth)
        {
            brushWidth = newWidth;
        }

        public override void TouchesBegan(NSSet touches, UIEvent evt)
        {
            swiped = false;

            if (touches.First().GetType() == typeof(UITouch))
            {
                lastPoint = ((UITouch)touches.First()).LocationInView(this);
            }
        }

        public override void TouchesMoved(NSSet touches, UIEvent evt)
        {
            swiped = true;
            if (touches.First().GetType() == typeof(UITouch))
            {
                var currentPoint = ((UITouch)touches.First()).LocationInView(this);
                DrawLineFrom(lastPoint, currentPoint);
                lastPoint = currentPoint;
            }
        }

        public override void TouchesEnded(NSSet touches, UIEvent evt)
        {
            if (!swiped)
            {
                DrawLineFrom(lastPoint, lastPoint);
            }

            UIGraphics.BeginImageContext(Frame.Size);
            canvasImg.Image?.DrawAsPatternInRect(new CGRect(0, 0, Frame.Size.Width, Frame.Size.Height));
            canvasTempImg.Image?.DrawAsPatternInRect(new CGRect(0, 0, Frame.Size.Width, Frame.Size.Height));
            canvasTempImg.Alpha = opacity;
            canvasImg.Image = UIGraphics.GetImageFromCurrentImageContext();

            UIGraphics.EndImageContext();

            canvasTempImg.Image = null;
        }

        private void DrawLineFrom(CGPoint fromPoint, CGPoint toPoint)
        {
            UIGraphics.BeginImageContext(Frame.Size);
            var context = UIGraphics.GetCurrentContext();
            canvasTempImg.Image?.DrawAsPatternInRect(new CGRect(0, 0, Frame.Size.Width, Frame.Size.Height));

            context.MoveTo(fromPoint.X, fromPoint.Y);
            context.AddLineToPoint(toPoint.X, toPoint.Y);

            context.SetLineCap(CGLineCap.Round);
            context.SetLineWidth(brushWidth);
            context.SetStrokeColor(colour);
            context.SetBlendMode(CGBlendMode.Normal);

            context.StrokePath();

            canvasTempImg.Image = UIGraphics.GetImageFromCurrentImageContext();
            canvasTempImg.Alpha = opacity;
            UIGraphics.EndImageContext();
        }
	}
}
